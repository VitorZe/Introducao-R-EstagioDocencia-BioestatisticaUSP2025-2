round(
sd(df$P00404)/sqrt(length(df)),
2)
#Desv. Pad e dps Erro padrao
paste('n = 10')
round(sd(df_medias$medias10),2)
round(sd(df_medias$medias10)/sqrt(length(df_medias)), 2)
paste('n = 50')
round(sd(df_medias$medias50),2)
round(sd(df_medias$medias50)/sqrt(length(df_medias)),2)
paste('n = 100')
round(sd(df_medias$medias100),2)
round(sd(df_medias$medias100)/sqrt(length(df_medias)),2)
#Manipulação de dados
library(dplyr)
library(tidyr)
library(purrr)
library(hrbrthemes) #temas adicionais (dark - theme_ft_rc()
# Removendo podis (valores null)
altura_pop <- df$P00404
altura_pop <- altura_pop[!is.na(altura_pop)]
set.seed(12) #pra reprodutibilidae(?)
# função seq() pra gerar os tamanhos amostrais, de1 em 1
ns <- c(seq(10, 1000, by = 10))
# Função de simulação, gerando as media de 50 grupos por cada tamanho amostral
simular_medias <- function(n) {
medias <- replicate(50,
mean(sample(altura_pop,
n,
replace = TRUE)))
tibble(n = n, media = medias)
}
(c(1, 2,3,4))
# map_dfr() aplica uma função a um dataframe
# nesse caso, pega uma lista e aplica a função
#No caso pega a função "simular_medias" e o 'ns' é o vetor que vai receber a função, uma vez recebido, retorna um dataframe
df_medias <- map_dfr(ns, simular_medias)
#Agora temos um dataframe com uma media de valores do 'replicate' 50 vezes para cada n
# Calculando a amplitude das médias por tamanho amostral
df_amplitude <- df_medias %>%
group_by(n) %>%
summarise(min_media = min(media),
max_media = max(media),
desvPad = sd(media),
.groups = "drop") %>%
mutate(erroPad = 9.71/sqrt(n))
df_plot <- df_medias
df_plot
df_amplitude
df_amplitude %>%
pivot_longer(cols = c(erroPad, desvPad),
names_to = "Tipo",
values_to = "Valor") %>%
ggplot(aes(x = n, y = Valor, color = Tipo)) +
xlab('Tamanho amostral') + ylab("") +
geom_line() + theme_minimal()
ggplot(df_amplitude, aes(x = n, y = erroPad)) +
geom_line(color = 'orange3') +
geom_line(aes(x = n, y = desvPad),
color = 'steelblue',
alpha = 1) +
geom_line(aes(x = n, y = max_media-min_media),
color = 'black',
alpha = 1) +
theme_minimal()
ggplot(df_amplitude, aes(x = n, y = erroPad)) +
geom_line(color = 'orange3') +
geom_line(aes(x = n, y = desvPad),
color = 'black',
alpha = 1) +
xlab("Tamanho amostral") +
ylab("") +
theme_minimal()
ggplot(df_amplitude, aes(x = n, y = erroPad)) +
geom_line(color = 'orange3') +
theme_minimal()
df_plot <- left_join(df_medias, df_amplitude, by = "n")
# Dispersão 1
ggplot(df_plot[1,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Pontos de 1 média de altura
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
## Rótulo dos valores
geom_label(aes(label = media), vjust=0.01) +
#ROTULOS E TEMA
labs(title = "Distribuição de 1 média amostral",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none")
# Dispersão 2
ggplot(df_plot[1:2,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Pontos das 2 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
##Rótulinhos
geom_label(aes(label = media), vjust = -0.01) +
#ROTULOS E TEMA
labs(title = "Distribuição de 2 médias amostrais",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none")
# Dispersão 5
ggplot(df_plot[1:5,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Pontos das 5 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
##Rotulinhos
geom_label(aes(label = media), vjust = 0.01) +
#ROTULOS E TEMA
labs(title = "Distribuição de 5 médias amostrais",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none")
# Dispersão 10
ggplot(df_plot[1:10,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Pontos das 50 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
#ROTULOS E TEMA
labs(title = "Distribuição de 10 médias amostrais",
x = "Média da amostra", y = "") +
theme_minimal(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none")
# Dispersão 50
ggplot(df_plot[1:50,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Pontos das 50 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
#ROTULOS E TEMA
labs(title = "Distribuição de 50 médias amostrais",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none")
#Dispersão com Retangulo
ggplot(df_plot[1:50,], aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Retangulo da amplitude
geom_rect(aes(xmin = min_media,
xmax = max_media,
ymin = -Inf,
ymax = Inf,
group = n),
fill = "grey",
alpha = 0.2) +
## 1.2 Pontos das 50 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "red",
linetype = "dashed") +
#ROTULOS E TEMA
labs(title = "Distribuição de 50 médias amostrais (Amplitude)",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()) +
guides(size = "none")
library(ggplot2)
library(gganimate)
# Juntando médias e amplitudes
df_plot <- left_join(df_medias, df_amplitude, by = "n")
p <- ggplot(df_plot, aes(x = media, y = 1)) +
# 1.GRÁFICOS
## 1.1 Retangulo da amplitude
geom_rect(aes(xmin = min_media,
xmax = max_media,
ymin = -Inf,
ymax = Inf,
group = n),
fill = "grey",
alpha = 0.2) +
## 1.2 Pontos das 50 médias de alturas
geom_jitter(aes(size=log(n)),
width = 0,
height = 0.1,
color = "black",
alpha = 0.8) +
## Média da população
geom_vline(xintercept = mean(altura_pop),
color = "black",
linetype = "dashed") +
#ROTULOS E TEMA
labs(title = "Distribuição de 50 médias amostrais",
subtitle = "Tamanho amostral: {current_frame}",
x = "Média da amostra", y = "") +
theme_classic(base_size = 14) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.line.y = element_blank()
) +
guides(size = "none") +
#ANIMAÇÃO
transition_states(n, transition_length = 2, state_length = 1) +
transition_manual(n)
p
ggplot(df_amplitude, aes(x = n, y = erroPad)) +
geom_line(color = 'orange3') +
geom_line(aes(x = n, y = desvPad),
color = 'black',
alpha = 1) +
xlab("Tamanho amostral") +
ylab("") +
theme_minimal() +
#ANIMAÇÃO
transition_states(n, transition_length = 2, state_length = 1) +
transition_manual(n)
df_amplitude <- df_amplitude %>%
mutate(amplitude = max_media - min_media)
p_amp <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = amplitude,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Amplitude das médias amostrais",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Amplitude") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_amp
df_amplitude
p_amp <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = erroPad,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Amplitude das médias amostrais",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Amplitude") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_amp
p_amp <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = erroPad,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Erro padrão das médias amostrais de altura",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Erro Padrão") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_amp
p_amp <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = erroPad,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Erro padrão das médias amostrais de altura",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Erro Padrão") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_amp
p_amp <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = amplitude,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Erro padrão das médias amostrais de altura",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Amplitude") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_amp
p_erroP <- ggplot(df_amplitude,
aes(x = as.numeric(as.character(n)),
y = erroPad,
group = 1)) +
geom_line(color = "black") +
geom_point(color = "black", size = 2) +
labs(
title = "Erro padrão das médias amostrais de altura",
subtitle = "Tamanho amostral: {round(frame_along)}",
x = "Tamanho amostral (n)", y = "Erro Padrão") +
theme_minimal(base_size = 14) +
transition_reveal(as.numeric(as.character(n))) +
ease_aes("linear") +
enter_fade() + exit_fade()
p_erroP
# Plot dispersao
animate(p, nframes = length(ns) * 4,
fps = 60,
width = 1200,
height = 600,
renderer = gifski_renderer())
anim_save("/Midia -  Gifs/media_animada1010.gif")
animate(p, nframes = length(ns) * 4,
fps = 60, width = 1200,
height = 600,
renderer = av_renderer())
anim_save("/Midia -  Videos/media_animadaVIDEO1em1.mp4")
#Plot amplitude
animate(p_amp, nframes = length(unique(df_amplitude$n)),
fps = 60,
width = 1600,
height = 600,
renderer = gifski_renderer())
anim_save("/Midia -  Gifs/amp_animada1010.gif")
n_frames <- length(unique(df_amplitude$n))
animate(p_amp, nframes = length(ns) * 4, fps = 60, width = 1200, height = 600, renderer = av_renderer())
anim_save("/Midia -  Videos/amp_animada_video_1010.mp4")
animate(p_erroP, nframes = length(ns) * 4, fps = 60, width = 1200, height = 600, renderer = av_renderer())
anim_save("/Midia -  Videos/erroP_animado_video_1010.mp4")
##  Operações matemáticas básicas
2 + 2
5 * 3
10 / 2
2^3
#Outros são funções, que recebem um valor e resultam em outro
log(2) #Logarítmo
log(c(2, 3, 4))
sum(c(2,3,4)) #Somatório
sqrt(2) #Raiz quadrada
#Podemos criar variaveis, ao dizer ao R que o objeto criado é (<-) alguma coisa
peso <- 50
peso+peso
pesos <- c(50, 20, 34, 26)
alturas <- c(1.60, 1.70, 1.65)
pesos/alturas^2
idades <- c(
18, 19, 20, 21, 21, 22, 22, 23, 23, 24,
24, 25, 25, 25, 26, 26, 27, 27, 28, 28,
29, 29, 30, 30, 31, 32, 33, 34, 35, 36
)
plot(idades)
hist(idades, bins = 3) #Histograma
stripchart(idades)
stripchart(idades, method = "stack") #Grafico de pontos
boxplot(idades, horizontal = TRUE,
main = "Titulo uno",
xlab = "Eixo x",
yab = "Eixo y",
col = "steelblue")
dados <- read.csv("https://raw.githubusercontent.com/VitorZe/Introducao-R-PAE-BioestatisticaNutricao/refs/heads/main/dados/dadosNutri.csv")
head(dados)
tail(dados)
View(dados)
dados$sexo
dados$altura
dados$proteina_g
table(dados$sexo)
hist(dados$peso)
hist(dados$altura)
boxplot(dados$altura, horizontal = TRUE)
boxplot(dados$altura, horizontal = TRUE)
dados[1]
dados[2,2]
dados[dados$sexo, "altura"]
dados[dados$sexo == "M", "altura"]
dados[order(dados$altura), ]
dados[dados$altura*100, ]
order(dados$altura)
order(dados$idade)
dados[order(dados$altura,)]
dados[order(dados$altura), ]
dados[dados$altura <= 0.5, c("altura", "peso")]
dados[dados$altura <= 0.5, ]
dados[dados$id == 11, "altura"]
dados[dados$id == 11, "altura"] <- 1.82
dados[dados$id == 11, "altura"]
dados[dados$id == 11, "altura"]
dados[dados$sexo == "F" | dados$altura > 1.5, ]
dados[dados$sexo == "F" & dados$altura > 1.5, ]
dados[dados$sexo == "F" &
dados$altura > 1.5 &
dados$peso > 60, ]
mulheres1.560kilo <- dados[dados$sexo == "F" &
dados$altura > 1.5 &
dados$peso > 60, ]
mulheres1.560kilo
boxplot(mulheres1.560kilo, horizontal = TRUE)
boxplot(mulheres1.560kilo, horizontal = TRUE)
mulheres1560kilo <- dados[dados$sexo == "F" &
dados$altura > 1.5 &
dados$peso > 60, ]
mulheres1560kilo
boxplot(mulheres1560kilo, horizontal = TRUE)
boxplot(mulheres1560kilo)
boxplot(mulheres1560kilo$idade , horizontal = TRUE)
barplot(table(dados$sexo))
summary(dados$peso)
summary(dados$altura)
install.packages("openxlsx")
install.packages("openxlsx")
library(openxlsx)
